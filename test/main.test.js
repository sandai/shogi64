"use strict";

var shogi64 = require('../lib/main');

describe('main.js', function() {
  // 初期盤面
  // var position1 = {
  //   'turn': true,
  //   'board':[-2,-3,-4,-5,-8,-5,-4,-3,-2,
  //            0,-7,0,0,0,0,0,-6,0,
  //            -1,-1,-1,-1,-1,-1,-1,-1,-1,
  //            0,0,0,0,0,0,0,0,0,
  //            0,0,0,0,0,0,0,0,0,
  //            0,0,0,0,0,0,0,0,0,
  //            1,1,1,1,1,1,1,1,1,
  //            0,6,0,0,0,0,0,7,0,
  //            2,3,4,5,8,5,4,3,2],
  //   'hands': {'black': {'FU':0, 'KY':0, 'KE': 0, 'GI': 0, 'KI': 0, 'KA': 0, 'HI': 0},
  //             'white': {'FU':0, 'KY':0, 'KE': 0, 'GI': 0, 'KI': 0, 'KA': 0, 'HI': 0}}
  // };

  var position = {
    'turn': true,
    'board':[0,-3,0,-5,-8,-5,0,-3,-2,
             0,0,0,0,0,0,0,0,0,
             0,-1,0,-1,-1,-1,-1,0,-1,
             0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,
             1,1,0,0,1,1,0,1,0,
             0,6,0,0,0,0,0,0,0,
             0,3,4,5,8,5,0,3,0],
    'hands': {'black': {'FU':1, 'KY':1, 'KE': 0, 'GI': 2, 'KI': 0, 'KA': 1, 'HI': 0},
              'white': {'FU':3, 'KY':2, 'KE': 0, 'GI': 1, 'KI': 0, 'KA': 0, 'HI': 2}}
  };

  var mixposition = {
    'turn': true,
    'board':[0,-3,0,-5,-8,-5,0,-3,-2,
             0,0,0,0,0,0,0,0,0,
             0,-1,0,-1,-1,-1,-1,0,-1,
             0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,1,0,0,-1,
             0,1,0,0,0,0,0,0,0,
             1,1,0,0,1,1,0,1,0,
             0,6,0,0,0,0,0,0,0,
             0,3,4,5,8,5,0,3,0],
    'hands': {'black': {'FU':1, 'KY':1, 'KE': 0, 'GI': 2, 'KI': 0, 'KA': 1, 'HI': 0},
              'white': {'FU':3, 'KY':2, 'KE': 0, 'GI': 1, 'KI': 0, 'KA': 0, 'HI': 2}}
  };

  describe('encodeBitsToShogi64(bits)', function() {
    it('バイナリがshogi64に正しく変換されているか全てチェック', function() {
      expect(shogi64.encodeBitsToShogi64('000000000001000010000011000100000101000110000111001000001001001010001011001100001101001110001111010000010001010010010011010100010101010110010111011000011001011010011011011100011101011110011111100000100001100010100011100100100101100110100111101000101001101010101011101100101101101110101111110000110001110010110011110100110101110110110111111000111001111010111011111100111101111110111111')).toEqual(shogi64.table);
    });
  });

  describe('encodeBoardToBits(board)', function() {
    it('局面をハフマン符号にして返す', function() {
      expect(shogi64.encodePositionToBits(position)).toEqual('1010011010000101001101100011001101100110000011000110000101010100110001000000000000000000000000000000000000000000000001111010000000011001110111011101101100100110011001001101100100011');
    });
    it('局面をミックスモードのハフマン符号にして返す', function() {
      expect(shogi64.encodePositionToBits(mixposition)).toEqual('1101110000110101110100110100111000110000000000000100010010010010001000000000000000010100100010100000001011010010110101010011111010000000011100111110111011111010111011011100100110011001001101100100011');
    });
  });

  describe('encode(board)', function() {
    it('局面をshogi64にして返す', function() {
      expect(shogi64.encode(position)).toEqual('poU2M2YMYVTEAAAAAAAHoBnd2yZk2Rg');
    });
    it('局面をshogi64にして返す', function() {
      expect(shogi64.encode(mixposition)).toEqual('3DXTTjAARJIgABSKAtLVPoBz7vrtyZk2Rg');
    });
  });

  describe('decodeShogi64ToBits(shogi64)', function() {
    it('正しくshogi64に変換されているか全ての文字をチェック', function() {
      expect(shogi64.decodeShogi64ToBits(shogi64.table)).toEqual('000000000001000010000011000100000101000110000111001000001001001010001011001100001101001110001111010000010001010010010011010100010101010110010111011000011001011010011011011100011101011110011111100000100001100010100011100100100101100110100111101000101001101010101011101100101101101110101111110000110001110010110011110100110101110110110111111000111001111010111011111100111101111110111111');
    });
    it('符号化された局面をバイナリに復号して返す', function() {
      expect(shogi64.decodeShogi64ToBits('poU2M2YMYVTEAAAAAAAHoBnd2yZk2Rg')).toEqual('101001101000010100110110001100110110011000001100011000010101010011000100000000000000000000000000000000000000000000000111101000000001100111011101110110110010011001100100110110010001100000');
    });
  });

  describe('decodeBitsToBoard(bit)', function() {
    it('バイナリをboardに変換して返す', function() {
      expect(shogi64.decodeBitsToPosition('101001101000010100110110001100110110011000001100011000010101010011000100000000000000000000000000000000000000000000000111101000000001100111011101110110110010011001100100110110010001100000')).toEqual(position);
    });
  });

  describe('decode(shogi64)', function() {
    it('符号化された局面を復号化して返す', function() {
      expect(shogi64.decode('poU2M2YMYVTEAAAAAAAHoBnd2yZk2Rg')).toEqual(position);
    });
    it('ミックスモードで符号化された局面を復号化して返す', function() {
      expect(shogi64.decode('3DXTTjAARJIgABSKAtLVPoBz7vrtyZk2Rg')).toEqual(mixposition);
    });
  });
});
